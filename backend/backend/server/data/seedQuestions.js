import { MongoClient } from "mongodb";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";

dotenv.config();

// --- ◊î◊í◊ì◊®◊ï◊™ ---
const uri = process.env.MONGODB_URI;
const client = new MongoClient(uri);

async function run() {
  try {
    await client.connect();
    console.log("‚úÖ Connected to MongoDB Atlas");

    const database = client.db("test");
    const questionsCollection = database.collection("questions");

    // --- ◊†◊ô◊î◊ï◊ú ◊ê◊ô◊†◊ì◊ß◊°◊ô◊ù ---
    try {
      // ◊û◊ï◊ó◊ß ◊ê◊™ ◊õ◊ú ◊î◊ê◊ô◊†◊ì◊ß◊°◊ô◊ù ◊î◊ß◊ô◊ô◊û◊ô◊ù
      await questionsCollection.dropIndexes();
      console.log("üóëÔ∏è Dropped all existing indexes");
    } catch (e) {
      console.log("‚ÑπÔ∏è No indexes to drop or error ignoring:", e.message);
    }

    // ◊ô◊¶◊ô◊®◊™ ◊ê◊ô◊†◊ì◊ß◊°◊ô◊ù ◊ó◊ì◊©◊ô◊ù
    await questionsCollection.createIndex({ programmingLanguage: 1 });
    await questionsCollection.createIndex({ difficulty: 1 });
    await questionsCollection.createIndex({ tags: 1 });
    // ◊ê◊ô◊†◊ì◊ß◊° ◊û◊ï◊®◊õ◊ë ◊¢◊ú ◊©◊§◊î + ◊®◊û◊™ ◊ß◊ï◊©◊ô
    await questionsCollection.createIndex({ programmingLanguage: 1, difficulty: 1 });
    console.log("‚úÖ Indexes ensured (programmingLanguage, difficulty, tags, compound)");

    // --- ◊ß◊®◊ô◊ê◊™ ◊î◊ß◊ï◊ë◊• JSON ---
    const filePath = path.join(process.cwd(), "server", "data", "questions", "questions.json");
    const questionsData = JSON.parse(fs.readFileSync(filePath, "utf-8"));

    // ◊î◊û◊®◊î ◊ú◊û◊¢◊®◊ö ◊ê◊ó◊ì ◊¢◊ù ◊©◊ì◊î programmingLanguage ◊ß◊ò◊ü
    const questionsArray = Object.entries(questionsData).flatMap(([language, questions]) =>
      questions.map(q => ({ ...q, programmingLanguage: language.toLowerCase() }))
    );

    // ◊ß◊ë◊ú◊™ ◊õ◊ú ◊î◊©◊ê◊ú◊ï◊™ ◊î◊ß◊ô◊ô◊û◊ï◊™
    const existingQuestions = await questionsCollection.find({}, { projection: { name: 1, programmingLanguage: 1 } }).toArray();

    // ◊°◊ô◊†◊ï◊ü ◊©◊ê◊ú◊ï◊™ ◊ó◊ì◊©◊ï◊™ ◊ë◊ú◊ë◊ì
    const newQuestions = questionsArray.filter(q => {
      return !existingQuestions.some(eq => eq.name === q.title && eq.programmingLanguage === q.programmingLanguage);
    });

    if (newQuestions.length === 0) {
      console.log("‚ÑπÔ∏è No new questions to insert");
      return;
    }

    // ◊î◊õ◊†◊°◊™ ◊©◊ê◊ú◊ï◊™ ◊ó◊ì◊©◊ï◊™
    const result = await questionsCollection.insertMany(
      newQuestions.map(q => ({
        name: q.title,
        description: q.description,
        difficulty: q.difficulty,
        tags: q.tags,
        examples: q.examples,
        programmingLanguage: q.programmingLanguage,
      }))
    );

    console.log(`‚úÖ Inserted ${result.insertedCount} new questions`);
  } catch (err) {
    console.error("‚ùå Error seeding questions:", err);
  } finally {
    await client.close();
  }
}

run();
